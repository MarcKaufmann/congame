#+TITLE: Design and Features

* TODO

** Teaching

Multi-player feedback study

- scores
- data extraction
- review of feedback and submission by admin

Survey for students to /take/

- week 1
- pjb pilots across classes.

Studies from required reading

- week 1

Data extraction

- week 1 survey

Assignment for week 1

- Quizzes for required readings and understanding

Sysadmin

- log into the server daily, do sysadmin tasks (backup of data etc)

** Documenting Congame

  - [ ] document congame (widgets and widget-actions)
  - [ ] /How to set up congame/
  - [ ] /How to write your first study/
  - [ ] /How to write a multi-user study/

** Design

*** Multi-user studies

Look into oTree and into zTree, as well as Gorilla.

*** Feedback on Steps

Functionality to provide feedback on a step in a study by highlighting step as feedbackable. Essentially a decorator or wrapper for steps. Such a step will have an additional button for feedback on that particular step. It should be possible to tailor this.

* Old

Questions and features about congame's design. The first category is about improving the current version of congame -- without major data structure changes or major syntactic sugar. The second category is about improvements that require major changes, or at least appear to require them.

** Design improvements of current version

Topics: study flow; user-specific step actions; treatment specification and control flow; parameterize bots; error messages

** For Documentation

1. [Bogdan] How to pass in `#:requires` to the top level study?
   - Set them at the instance level when creating a new instance. Q: Should they be changeable in admin interface?
     - Better to start a new instance with new `#:requires` -- this will depend on how we deal with recruitment (e.g. so that new people get sent to the new instance)
   - For now, define a wrapper top-level that passes in the `#:requires`
2. [Bogdan] How can I take participant-specific actions after a given step?
   - Example: in "pjb-pilot.rkt" in `render-debrief-form`, should I call `put-payment!` there? Seems dumb, since we can have multiple submit hits.
   - The action handlers after forms (and normal steps too?) do not have access to `(current-user)`. This is probably sensible, but how does one take actions that depend on what the person did?
   - We have `get` and `put`, but any action such as sending mail requires some information that is not available to the study designer
3. [out-of-date?] Parameterized bots: how to ensure the right values get passed in?
   - See comment about /bespoke/ values for bots to give better error messages, i.e. ensuring the values are of the right kind
4. Document how transitions and steps interact and how to define the study logic, including randomization. Can steps override the transition or do transitions override steps? Is there a way to define transition logic at the step level right now? It must be, since the transition macro simply sticks that into the transition handler of the step. The question is who gets priority.
5. Examples of how to name steps, how to store data, how to extract it.
6. Document possible gotchas. Use such gotchas to improve design and avoid them entirely.
7. Document how failing and finishing studies works
8. How to configure Sentry
9. [out-of-date/fixed?] Why is `current-user` not available after form submit, but `current-study-manager`? I get the former, but am puzzled by the latter being available: I believe it's because its set in the thread before handlers get called, but I thought that `current-user` is also set there, so it's weird that `current-user is missing`. Edit: I believe we fixed this and it was a bug, but I do not remember.
   - The widget-actions or transitions are where actions should be taken
10. Document `#:require-bindings` in `make-step/study` for taking values that are variable
11. Document `make-step`, `make-step/study`, and friends

*** Features

1. Have a mechanism for why data isn't set when it isn't. Related to how failures are dealt with, but not only.
   - Example: failing tasks leads to no answer given to later WTW questions, hence a `#:provides` fails. For later data analysis, we may care about why we didn't see it, e.g. for selection analysis.
   - Example: a person may answer all the questions, but the price list is inconsistent. Thus the *derived* quantity `WTW` doesn't exist, and should be `NA:inconsistent-switches` or some such, as opposed to `NA:failed-tasks`
2. Check error messages, make sure that the message is not more specific than it has a right to assume -- i.e. it is sure the where the error is from if it says so.
3. buttons and submits: How to put time limits on when it is possible to move on? E.g. for listening to music: wait until it has finished, and after at least as much time as the music takes to play
4. helper functions to deal with timing
5. Do we need the provides and requires? Yes, at least sometimes. The provides not necessarily, but the requires. The provides can be used for simplifying data for easy data extraction.
